#!/usr/bin/perl

use strict;
use warnings;

our $VERSION = '1.0';

use Carp;
use DBI;
use File::Find;
use File::Spec;
use Getopt::Long;
use Pod::Usage;
use Tie::File;

my $OPTIONS = _parse_options();

my $DB  = $OPTIONS->{database};
my $LTB = $OPTIONS->{'lines-terminated-by'};
my $FTB = $OPTIONS->{'fields-terminated-by'};
my $FEB = $OPTIONS->{'fields-optionally-enclosed-by'};
my $VERBOSE = $OPTIONS->{verbose};

my $DBH = _open_dbh();
my %DB_TABLES = _db_tables();
my %TABLES;

my ($_record_file) = _find_in_dir(qr/^\.loader\.log$/xms);
tie my @RECORDS, 'Tie::File', $_record_file or confess("Cannot open file $_record_file : $!");
my %PROCESSED_RECORDS = _process_records();

process_db();
exit 0;

sub process_db {
	verbose("Working on database '${DB}'");
	
	if(scalar(keys %DB_TABLES) == 0) {
		verbose("\tAbout to load schema");
		_squirt_sql();
		%DB_TABLES = _db_tables(); #Have to reload to see what we got from the squirt
	}
	else {
		verbose("\tTables detected in the target schema; not loading the schema file");
	}
	
	%TABLES = _tables();
	
	foreach my $table (keys %TABLES) {
		_process_table($table);	
	}
	
	verbose("Finished with database '${DB}'");
	return;
}

sub verbose {
	if($VERBOSE) {
		print STDERR @_, "\n";	
	}
	return;
}

sub _process_table {
	my ($table) = @_;
	
	if($PROCESSED_RECORDS->{$table}) {
		verbose("\tNot processing $table as it is already in .loader.log. If this is not wrong then remove & rerun");
		return;
	}
	
	verbose("\tWorking on table '${table}'");
	
	my @files = _find_in_dir(qr/$table/);
	foreach my $file (@files) {
		verbose("\t\tLoading $file");
		_load($table, qr/^$file\./);
	}
	
	push(@RECORDS, $table);
	
	verbose("\tFinished table");
	return;
}

sub _parse_options {
	my @options = qw(
		directory=s
		database=s 
		fields-escaped-by=s 
		fields-optionally-enclosed-by=s 
		fields-terminated-by=s 
		host=s
		lines-terminated-by=s 
		password=s
		port=i
		skip-lines=i
		tables=s
		user=s
		verbose 
		version 
		help|? 
		man
	);
	
	my $opts = {};
	
	GetOptions($opts, @options) or pod2usage(2);
	pod2usage(1) if $opts->{help};
	pod2usage(-exitstatus => 0, -verbose => 2) if $opts->{man};
	if($opts->{version}) {
		print "mysqlnaga-loader version $VERSION\n";
		exit(0);
	}
	_confirm_options($opts);
	return $opts;
}

sub _confirm_options {
	my ($opts) = @_;
	
	if(!$opts->{database}) {
		print STDERR "Need a schema to dump\n";
		pod2usage(1);
	}
	
	if($opts->{replace} && $opts->{ignore}) {
		print STDERR "Cannot specify both replace & ignore. Choose one\n";
		pod2usage(1);
	}
	
	_optional_set($opts, 'fields-terminated-by', "\t");
	_optional_set($opts, 'fields-optionally-enclosed-by', q{});
	_optional_set($opts, 'lines-terminated-by', "\n");
	_optional_set($opts, 'directory', '.');
	
	return;	
}

sub _optional_set {
	my ($opts, $key, $default) = @_;	
	$opts->{$key} = $default unless $opts->{$key};
	return;
}

sub _open_dbh {
	my ($hostname, $port, $user, $password) = (
		($OPTIONS->{host})     ? ";host=$OPTIONS->{host}" : '',
		($OPTIONS->{port})     ? ";port=$OPTIONS->{port}" : '',
		($OPTIONS->{user})     ? $OPTIONS->{user} : undef,
		($OPTIONS->{password}) ? $OPTIONS->{password} : undef
	);
	my $dsn = "DBI:mysql:database=${DB}${hostname}${port}";
	my $dbh = DBI->connect($dsn, $user, $password, {RaiseError => 1});
	return $dbh;
}

sub _squirt_sql {
	my ($self) = @_;
	
	my ($sql) = _find_in_dir(qr/\.sql/);
	if(! -f $sql) {
		confess('No .sql file found and no schema tables detected');
	}
	
	my @args = (
		$OPTIONS->{database},
		($OPTIONS->{port}) ? '--port '.$OPTIONS->{port} : q{},
		($OPTIONS->{user}) ? '--user '.$OPTIONS->{port} : q{},
		($OPTIONS->{password}) ? '--password '.$OPTIONS->{password} : q{},
		$sql
	);
	my $cmd = sprintf('mysql --host %s %s %s %s < %s', @args);
	system($cmd);
	my $exit_value  = $? >> 8;
	if($exit_value != 0) {
		confess('Exiting as mysql squirt failed');
	}
	return;
}

sub _db_tables {
	my %tables;
	my $sth = $DBH->table_info(undef, $OPTIONS->{database}, '%');
	while(my $row = $sth->fetchrow_arrayref()) {
		$tables->{$row->[2]} = 1;	
	}
	$sth->finish();
	return %tables;
}

#Load only the specified tables or all of them in the DB
sub _tables {
	my %tables;
	if($OPTIONS->{tables}) {
		%tables = map {$_ => 1} split(/,/, $OPTIONS->{tables});
	}
	else {
		%tables = _db_tables();	
	}
	return %tables;
}

sub _find_in_dir {
	my ($self, $file_regex) = @_;
	my @files;
	find(sub {
		my $file_name = $_;
		push(@files, $File::Find::name);
	}, $OPTIONS->{directory});
	return @files;
}

sub _load {
	my ($table, $file) = @_;
	
	my $field_opts = q{};
	if($FTB || $FEB) {
		$field_opts .= 'FIELDS ';
		if($FTB) {
			$field_opts .= q{terminated by '}.$FTB.q{' };
		}
		if($FEB}) {
			$field_opts .= q{optionally enclosed by '}.$FTB.q{' };
		}
	}
	
	my @args = (
		$file,
		($OPTIONS->{replace}) ? 'REPLACE' ? ($OPTIONS->{ignore}) 'IGNORE' : q{},
		$table,
		$field_opts,
		qq{lines terminated by '${LTB}'},
		($OPTIONS->{'skip_lines'}) ? 'ignore '.$OPTIONS->{'skip_lines'}.' lines' : q{},
	);
	
	my $sql = sprintf(q{LOAD DATA LOCAL INFILE '%s' %s INTO TABLE %s %s %s %s}, @args);
	my $sth = $DBH->prepare($sql);
	$sth->execute();
	$sth->finish();
	return;
}

sub _process_records {
	my %records;
	foreach my $line (@RECORDS) {
		chomp($line);
		$records{$line} = 1;
	}
	return %records;
}

__END__

=pod

=head1 NAME

mysqlnaga

=head1 SYNOPSIS

	./mysqlnaga -database DB [-directory DIR] [-host HOST] [-port PORT] [-user USER] [-pass PASS] [more options in -h]

=head1 DESCRIPTION

Provides a Pure Perl implementation of mysqlimport using only core modules
(with the exception of DBD::mysql). This program attempts to load an entire
directory of files and optionally load a schema in which should be located in
a single .sql file.

The program loads the schema (if present) and loops over all known DB tables
looking for files in the given directory with the same name as the table 
e.g. table tmp would be used to find files called tmp.txt tmp.001.txt but not
tmp_table.txt

The script also records what it has done to aid re-runs when connections fail
under stressful loads. This is called .loader.log which should be edited 
accordingly when you need to run a new file. 

=head1 OPTIONS

=over 8

=item B<--directory>

The directory to dump text files to. If not specified the program will use
the cwd

=item B<--database>

The database to dump. The only required parameter.

=item B<--fields-escaped-by>

Currently unimplemented as the meaning of it is ambigous in MySQL's documentation

=item B<--fields-optionally-enclosed-by>

The string to use to enclose fields. Only specify one. Defaults to blank

=item B<--fields-terminated-by>

The character(s) to indicate the end of a field. Currently defaults to tab

=item B<--replace>

If specified will force records to be replaced with those from the input file on conflicts

=item B<--ignore>

If specified will ignore clashes arising from input files

=item B<--skip-lines>

Will skip the number of given lines per table load

=item B<--host>

Host the MySQL server is located on

=item B<--lines-terminated-by>

String to indicate the end of a line i.e. the end of a record. Defaults to UNIX
line end.

=item B<--password>

Password for the target server

=item B<--port>

Port for the server

=item B<--tables>

Tables to dump. If not given then all are assumed

=item B<--user>

User to connect to the DB with

=item B<--verbose>

Print verbose logging messages along with the dump. These go to STDERR

=item B<--version>

Print vesion and exit

=item B<--write_header>

Writes a header line to the file which are the column names.

=item B<--help | --?>

This message

=item B<--man>

Perldoc with more information than -help alone

=back

=head1 DEPENDENCIES

Only DBD::mysql. All others are core Perl modules.

=head1 WHY NAGA

Because the program attempts to be smoking hot at copying databases. Also
naga is a lot smaller the jalepeno (and easier to remember).

=head1 AUTHOR

Andrew Yates

=head1 LICENSE

Copyright (c) 2009, ANDREW YATES
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
* Neither the name of the ANDREW YATES PERSONAL DEVELOPMENT nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

=head1 VERSION

1.0

=cut

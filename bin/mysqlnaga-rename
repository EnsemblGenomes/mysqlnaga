#!/bin/env perl

use strict;
use warnings;

our $VERSION = '1.0';

use Carp;
use DBI;
use Getopt::Long;
use Pod::Usage;

my %OPTIONS = _parse_options();

my $DB      = $OPTIONS{database};
my $VERBOSE = $OPTIONS{verbose};
my $TARGET  = $OPTIONS{target};
my $CREATE  = $OPTIONS{create};
my $DROP    = $OPTIONS{drop};

my $DBH       = _open_dbh();
my %DB_TABLES = _db_tables($DB);
my %VIEWS     = _views(); 

process_db();

sub process_db {
	verbose("Migrating database '${DB}' to '${TARGET}'");
	_assert_target();
	foreach my $table (sort keys %DB_TABLES) {
	  if($VIEWS{$table}) {
	    next;
	  }
		_process_table($table);	
	}
	foreach my $view (sort keys %DB_TABLES) {
	  if($VIEWS{$view}) {
	    _process_view($view);
	  }
	}
	_drop_source();
	verbose("Finished with database '${DB}'");
	return;
}

sub verbose {
	if($VERBOSE) {
		print STDERR @_, "\n";	
	}
	return;
}

sub _process_table {
	my ($table) = @_;
	verbose("\tWorking on table '${table}'");
	my $ddl = _generate_ddl($table);
	$DBH->do($ddl);		
	verbose("\tFinished table");
	return;
}

sub _process_view {
  my ($view) = @_;
  verbose("\tWorking on view '${view}'");
  my $ddl = _generate_view_ddl($view);
  my $drop_ddl = _generate_drop_view_ddl($view);
  $DBH->do("use $TARGET");
  $DBH->do($ddl);
  $DBH->do("use $DB");
  verbose("\tDropping view from database '${DB}'");
  $DBH->do($drop_ddl);
	verbose("\tFinished view");
	return;
}

sub _parse_options {
	my @options = qw(
	  create
		database=s
		drop 
		host=s
		password=s
		port=i
		target=s
		user=s
		verbose 
		version 
		help|? 
		man
	);
	
	my $opts = {};
	
	GetOptions($opts, @options) or pod2usage(2);
	pod2usage(1) if $opts->{help};
	pod2usage(-exitstatus => 0, -verbose => 2) if $opts->{man};
	if($opts->{version}) {
		print "mysqlnaga-rename version $VERSION\n";
		exit(0);
	}
	_confirm_options($opts);
	return %{$opts};
}

sub _confirm_options {
	my ($opts) = @_;
	
	if(!$opts->{database}) {
		print STDERR "Need a schema to rename from. Specify using -database\n";
		pod2usage(1);
	}
	
	if(!$opts->{target}) {
		print STDERR "Need a schema to rename to. Specify using -target\n";
		pod2usage(1);
	}
	
	return;	
}

sub _open_dbh {
	my ($hostname, $port, $user, $password) = (
		($OPTIONS{host})     ? ";host=$OPTIONS{host}" : '',
		($OPTIONS{port})     ? ";port=$OPTIONS{port}" : '',
		($OPTIONS{user})     ? $OPTIONS{user} : undef,
		($OPTIONS{password}) ? $OPTIONS{password} : undef
	);
	my $dsn = "DBI:mysql:database=${DB}${hostname}${port}";
	my $dbh = DBI->connect($dsn, $user, $password, {RaiseError => 1});
	return $dbh;
}

sub _assert_target {
  my $search_sql = "show databases like ?";
  my $ref = $DBH->selectall_arrayref($search_sql, {}, $TARGET);
  my $db_count = scalar(@{$ref});
  
  if($db_count < 1) {
    if($CREATE) {
      _create_target();
    }
    else {
      croak("Cannot continue. The specified schema '${TARGET}' does not exist. Create yourself or rerun with -create");
    }
  }
  
  my $table_count = _count_tables($TARGET);
  croak("Cannot continue. Target schema '${TARGET}' is not empty. Found $table_count table(s)") if $table_count > 0 ;
  return;
}

sub _db_tables {
  my ($db) = @_;
  $DBH->do('use '.$db);
	my %tables;
	my $sth = $DBH->table_info(undef, $db, '%');
	while(my $row = $sth->fetchrow_arrayref()) {
		$tables{$row->[2]} = 1;	
	}
	$sth->finish();
	$DBH->do('use '.$DB);
	return %tables;
}

sub _count_tables {
  my ($db) = @_;
  my %tables = _db_tables($db);
  my $table_count = scalar(keys(%tables));
  return $table_count;
}

sub _create_target {
  $DBH->do('create database '.$TARGET);
}

sub _drop_source {
  if(! $DROP) {
    verbose("Skipping dropping '${DB}'. You will have to manually remove this DB.");
    return;
  }
    
  my $count = _count_tables($DB);
  if($count == 0) {
    $DBH->do('drop database '.$DB);
  } 
  else {
    carp("Database $DB still has tables; cannot drop this schema");
  }
  
  return;
}

sub _generate_ddl {
  my ($table) = @_;
  return "rename table ${DB}.${table} to ${TARGET}.${table}";
}

sub _views {
  my %views;
  my $sth = $DBH->table_info( undef, $DB, '%', 'VIEW' );
  while ( my $row = $sth->fetchrow_arrayref() ) {
    $views{$row->[2]} = 1;
  }
  $sth->finish();
  return %views;
}

sub _generate_view_ddl {
  my ($view) = @_;
  my $q_view = $DBH->quote_identifier($view);
  my $sql = "SHOW CREATE TABLE ${q_view}";
  my @row_ary = $DBH->selectrow_array($sql);
  my ($view_name, $ddl) = @row_ary;
  return _alter_view($ddl);
}

sub _generate_drop_view_ddl {
  my ($view) = @_;
  my $q_view = $DBH->quote_identifier($view);
  return "DROP VIEW $q_view";
}

sub _alter_view {
  my ($ddl) = @_;
  verbose("\tRemoving DEFINER and setting SECURITY for view to INVOKER for portability");
  $ddl =~ s/ DEFINER=[a-zA-Z0-9`@%]+ / /;
  $ddl =~ s/SQL SECURITY DEFINER/SQL SECURITY INVOKER/;
  return $ddl;
}

__END__

=pod

=head1 NAME

mysqlnaga-rename

=head1 SYNOPSIS

	./mysqlnaga-rename -database DB -target DB [-create -drop] -host HOST] [-port PORT] [-user USER] [-pass PASS] [more options in -h]

=head1 DESCRIPTION

Provides the ability to quickly & easily rename a database on a MySQL server. It
does this by running rename commands on all available tables.

=head1 OPTIONS

=over 8

=item B<--create>

If specified will force a creation of the target schema only if it does not
already exist.

=item B<--drop>

Drops the source schema. Will abort this if the source schema still has tables
in it.

=item B<--target>

The database to rename to. Must already exist on the server.

=item B<--database>

The database to rename from

=item B<--host>

Host the MySQL server is located on

=item B<--password>

Password for the target server

=item B<--port>

Port for the server

=item B<--user>

User to connect to the DB with

=item B<--verbose>

Print verbose logging messages along with the dump. These go to STDERR

=item B<--version>

Print vesion and exit

=item B<--help | --?>

This message

=item B<--man>

Perldoc with more information than -help alone

=back

=head1 DEPENDENCIES

Only DBD::mysql. All others are core Perl modules.

=head1 WHY NAGA

Because the program attempts to be smoking hot at copying databases. Also
naga is a lot smaller the jalepeno (and easier to remember).

=head1 AUTHOR

Andrew Yates

=head1 LICENSE

Copyright (c) 2009, ANDREW YATES
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
* Neither the name of the ANDREW YATES PERSONAL DEVELOPMENT nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

=head1 VERSION

1.0

=cut
